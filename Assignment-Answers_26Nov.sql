use mavenmovies;

/* Basic Aggregate Functions: 
Question 1: 
Retrieve the total number of rentals made in the Sakila database. 
Hint: Use the COUNT() function. */

SELECT count(rental_id) from rental;


/* Question 2: 
Find the average rental duration (in days) of movies rented from the Sakila database.
Hint: Utilize the AVG() function. */

select 
	title as movie, 
    avg(rental_duration) 
from 
	film
group by movie;


/*  STRING FUNCTION
Question 3: 
 Display the first name and last name of customers in uppercase. 
 Hint: Use the UPPER () function. */
 
 SELECT UPPER(FIRST_NAME), UPPER(LAST_NAME) FROM CUSTOMER;
 
 
 /* Question 4: 
Extract the month from the rental date and display it alongside the rental ID. 
Hint: Employ the MONTH() function. */

select rental_id, month(rental_date) from rental;


/* GROUP BY
 Question 5: 
Retrieve the count of rentals for each customer (display customer ID and the count of rentals). 
Hint: Use COUNT () in conjunction with GROUP BY */

select customer_id, count(rental_id) from rental group by customer_id;



/* Question 6: 
Find the total revenue generated by each store. 
Hint: Combine SUM() and GROUP BY */


select
	store.store_id,
    sum(payment.amount)
from 
	store
inner join
	customer on store.store_id = customer.store_id
inner join
	payment on customer.customer_id = payment.customer_id
group by store.store_id;
	


/* JOIN
QUESTION 7
Display the title of the movie, customer s first name, and last name who rented it. 
Hint: Use JOIN between the film, inventory, rental, and customer tables. */

SELECT * FROM FILM;
SELECT 
	TITLE, CONCAT(FIRST_NAME, " ", LAST_NAME) AS NAME, rental_id
FROM
	FILM
inner JOIN
	INVENTORY ON INVENTORY.FILM_ID = FILM.FILM_ID
INNER JOIN
    RENTAL ON RENTAL.INVENTORY_ID = INVENTORY.INVENTORY_ID
INNER JOIN
	CUSTOMER ON RENTAL.CUSTOMER_ID  = CUSTOMER.CUSTOMER_ID
group by rental.rental_id;
    


/* Question 8: 
Retrieve the names of all actors who have appeared in the film "Gone with the Wind." 
Hint: Use JOIN between the film actor, film, and actor tables.  */

Select 
	concat(first_name, " ", last_name) as Name, title
from
	actor
inner join
	film_actor on actor.actor_id = film_actor.actor_id
inner join
	film on film_actor.film_id = film.film_id
where title = 'Gone with the Wind';

-- Note : There is no such movie called 'Gone with the Wind'


/* GROUP BY
 Question 1: 
Determine the total number of rentals for each category of movies. 
Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY. */

SELECT
    category.category_id,
    category.name AS Category,
    COUNT(rental.rental_id) AS TotalRentals
FROM
    film_category
INNER JOIN
    film ON film_category.film_id = film.film_id
INNER JOIN
    category ON film_category.category_id = category.category_id
INNER JOIN
    inventory ON film.film_id = inventory.film_id
INNER JOIN
    rental ON inventory.inventory_id = rental.inventory_id
GROUP BY
    category.category_id, category.name;


/* Question 2: 
Find the average rental rate of movies in each language. 
Hint: JOIN film and language tables, then use AVG () and GROUP BY.  */

SELECT 
	film.language_id,
    avg(rental_rate)
from 	
	film
inner join	
	inventory on film.film_id = inventory.film_id
inner join
	rental on inventory.inventory_id = rental.inventory_id
group by language_id;
	
    


/* JOINS
Question 3: 
Retrieve the customer names along with the total amount they've spent on rentals. 
Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY. */

SELECT
	concat(first_name, " ", last_name) as full_name,
    sum(amount)
FROM
	PAYMENT
INNER JOIN
	CUSTOMER ON payment.customer_id = customer.customer_id
inner join
	rental on customer.customer_id = rental.customer_id
group by full_name;

    
/* Question 4: 
List the titles of movies rented by each customer in a particular city (e.g., 'London'). 
Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY. */

SELECT
	city.city,
	film.title,
    customer.first_name
FROM
	FILM
INNER JOIN
	INVENTORY ON FILM.film_id = inventory.film_id
inner join
	rental on inventory.inventory_id = rental.inventory_id
inner join
	customer on rental.customer_id = customer.customer_id
inner join	
	address on customer.address_id = address.address_id
inner join 
	city on address.city_id = city.city_id
group by customer.first_name, film.title
having city.city = 'london'; 



/* Advanced Joins and GROUP BY: 
Question 5: 
Display the top 5 rented movies along with the number of times they've been rented. 
Hint: JOIN film, inventory, and rental tables, then use cOUNT() and GROUP BY, and limit the results */

select
	film.title,
    count(payment.amount)
from
	film
inner join
	inventory on film.film_id = inventory.film_id
inner join
	rental on inventory.inventory_id = rental.inventory_id
inner join
	payment on rental.rental_id = payment.rental_id
group by film.title
order by count(payment.amount) desc limit 5;
    

/*  Question 6: 
Determine the customers who have rented movies from both stores (store ID 1 and store ID 2). 
Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY.  */

	
select c.customer_id, c.first_name, c.last_name, count(distinct i.store_id) as total_rented_stores
from customer c 
inner join rental r on c.customer_id = r.customer_id   
inner join inventory i on r.inventory_id = i.inventory_id
-- where i.store_id in (1,2)
group by c.customer_id, c.first_name, c.last_name
-- having count(distinct i.store_id) = 2;

    
